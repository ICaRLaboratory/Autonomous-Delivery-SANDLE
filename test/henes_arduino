
#include <MsTimer2.h>
#include <ros.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float32.h>

ros::NodeHandle  nh;
geometry_msgs::Twist cmd_vel;   //
//std_msgs::Int32 encoder_data1;  //
//std_msgs::Int32 encoder_data2;  //
std_msgs::Float32 sonar_data1;
std_msgs::Float32 sonar_data2;
std_msgs::Float32 sonar_data3;

int velocity = 0;
int steer_angle = 0;

//Sonar Sensor

#include<NewPing.h>
#define SONAR_NUM 3
#define MAX_DISTANCE 200

NewPing sonar[SONAR_NUM]={
  NewPing(11,11,MAX_DISTANCE),
  NewPing(12,12,MAX_DISTANCE),
  NewPing(13,13,MAX_DISTANCE)
};
void teleop_cmd_vel_callback(const geometry_msgs::Twist& msg) {
  velocity = (int)msg.linear.x;       // 
  steer_angle = (int)msg.angular.z;   // steering motor 
  if(velocity >= 255) velocity  = 255;  // pwm 
  if(velocity <=-255) velocity = -255;  // pwm 
}

ros::Subscriber<geometry_msgs::Twist> teleop_cmd_sub("cmd_vel", teleop_cmd_vel_callback);
ros::Publisher cmd_pub("cmd_vel2", &cmd_vel);              //cmd_vel 
//ros::Publisher encoder_pub1("encoder1", &encoder_data1);
//ros::Publisher encoder_pub2("encoder2", &encoder_data2);
ros::Publisher sonar_pub1("sonar1",&sonar_data1);
ros::Publisher sonar_pub2("sonar2",&sonar_data2);
ros::Publisher sonar_pub3("sonar3",&sonar_data3);

///////////////////////////////// Front and rear Motor Drive /////////////////////////////
#define MOTOR1_PWM 2
#define MOTOR1_DIR 3


#define MOTOR2_PWM 5
#define MOTOR2_DIR 6

int f_speed = 0, r_speed = 0;

void front_motor_control(int motor1_pwm)
{
  if (motor1_pwm > 0) // forward
    {
    digitalWrite(MOTOR1_DIR, HIGH);
    analogWrite(MOTOR1_PWM, motor1_pwm);
  }
  else if (motor1_pwm < 0) // backward
    {
   digitalWrite(MOTOR1_DIR, LOW);
   analogWrite(MOTOR1_PWM, -motor1_pwm);
  }
  else
    {
   digitalWrite(MOTOR1_DIR, HIGH);
   digitalWrite(MOTOR1_PWM, 0);
  }
}

void rear_motor_control(int motor2_pwm)
{
  if (motor2_pwm > 0) // forward
    {
      digitalWrite(MOTOR2_DIR, HIGH);
      analogWrite(MOTOR2_PWM, motor2_pwm);
  }
  else if (motor2_pwm < 0) // backward
    {
      digitalWrite(MOTOR2_DIR, LOW);
      analogWrite(MOTOR2_PWM, -motor2_pwm);
  }
  else
    {
      digitalWrite(MOTOR2_DIR, HIGH);
      digitalWrite(MOTOR2_PWM, 0);
  }
}

void motor_control(int front_speed, int rear_speed)
{
 front_motor_control(front_speed);
 rear_motor_control(rear_speed);  
}



///////////////////////////////////////  Steering PID /////////////////////////////////////////////
#define Steering_Sensor A15  // Analog input pin that the potentiometer is attached to
#define NEURAL_ANGLE -3
#define LEFT_STEER_ANGLE  -30
#define RIGHT_STEER_ANGLE  30
#define MOTOR3_PWM 8
#define MOTOR3_DIR 9 


float Kp = 3.0;
float Ki = 2;
float Kd = 10; //PID 
double Setpoint, Input, Output; //PID 
double error, error_old;
double error_s, error_d;
int pwm_output;

int sensorValue = 0;        // value read from the pot
int Steer_Angle_Measure = 0;        // value output to the PWM (analog out)
int Steering_Angle = NEURAL_ANGLE;

void steer_motor_control(int motor_pwm)
{
  if (motor_pwm > 0) // forward
    {
      digitalWrite(MOTOR3_DIR, HIGH);
      analogWrite(MOTOR3_PWM, motor_pwm);
  }
  else if (motor_pwm < 0) // backward
    {
      digitalWrite(MOTOR3_DIR, LOW);
      analogWrite(MOTOR3_PWM, -motor_pwm);
  }
  else // stop
    {
       digitalWrite(MOTOR3_DIR, HIGH);
       analogWrite(MOTOR3_PWM, 0);
  }
}

void steer_PID_Control()
{
 error = Steering_Angle - Steer_Angle_Measure ;
 error_s += error;
 error_d = error - error_old;
 error_s = (error_s >=  100) ?  100 : error_s;
 error_s = (error_s <= -100) ? -100 : error_s;
 
 pwm_output = Kp * error + Ki * error_s + Kd * error_d;
 pwm_output = (pwm_output >=  255) ?  255 : pwm_output;
 pwm_output = (pwm_output <= -255) ? -255 : pwm_output;
 
 if (error == 0)
 {
   steer_motor_control(0);
   error_s = 0;
 }
 else          steer_motor_control(pwm_output);
 error_old = error;  
}

void Steering_angle_limit()
{
 if (Steering_Angle <= LEFT_STEER_ANGLE + NEURAL_ANGLE)  Steering_Angle  = LEFT_STEER_ANGLE + NEURAL_ANGLE;
 if (Steering_Angle >= RIGHT_STEER_ANGLE + NEURAL_ANGLE)  Steering_Angle = RIGHT_STEER_ANGLE + NEURAL_ANGLE;
 steer_PID_Control();
}

void Steering_control_callback()
{
 static boolean output = HIGH;
 
 digitalWrite(13, output);
 output = !output;
 
 motor_control(f_speed, r_speed);
 
 // read the analog in value:
 sensorValue = analogRead(Steering_Sensor);
 // map it to the range of the analog out:
 Steer_Angle_Measure = map(sensorValue, 50, 1050, LEFT_STEER_ANGLE, RIGHT_STEER_ANGLE);
 Steering_Angle = NEURAL_ANGLE + steer_angle;
 Steering_angle_limit();
}

///////////////////////////////////////  encoder /////////////////////////////////////////////
#define encoder0PinA 2
#define encoder0PinB 3

int encoder0Pos = 0;

void doEncoderA(){
  // look for a low-to-high on channel A
  if (digitalRead(encoder0PinA) == HIGH) { 
    // check channel B to see which way encoder is turning
    if (digitalRead(encoder0PinB) == LOW) {  
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
  else   // must be a high-to-low edge on channel A                                       
  { 
    // check channel B to see which way encoder is turning  
    if (digitalRead(encoder0PinB) == HIGH) {   
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
  Serial.println (encoder0Pos);
}

void doEncoderB(){
  // look for a low-to-high on channel B
  if (digitalRead(encoder0PinB) == HIGH) {   
   // check channel A to see which way encoder is turning
    if (digitalRead(encoder0PinA) == HIGH) {  
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
  // Look for a high-to-low on channel B
  else { 
    // check channel B to see which way encoder is turning  
    if (digitalRead(encoder0PinA) == LOW) {   
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
  Serial.println (encoder0Pos);
}

void setup() {
 // put your setup code here, to run once:
 Serial.begin(57600);
 pinMode(13, OUTPUT);
// Front Motor Drive Pin Setup
 pinMode(MOTOR1_PWM, OUTPUT);
 pinMode(MOTOR1_DIR, OUTPUT);  // motor control direction

 // Rear Motor Drive Pin Setup
 pinMode(MOTOR2_PWM, OUTPUT);
 pinMode(MOTOR2_DIR, OUTPUT);  // motor control direction

  //Steer
 pinMode(MOTOR3_PWM, OUTPUT);
 pinMode(MOTOR3_DIR, OUTPUT);  // motor control direction

 error = error_s = error_d = error_old = 0.0;
 pwm_output = 0;

  // Read Encoder Values
  pinMode(encoder0PinA, INPUT); 
  pinMode(encoder0PinB, INPUT); 
  attachInterrupt(0, doEncoderA, CHANGE); // encoder pin on interrupt 0 (pin 2)
  attachInterrupt(1, doEncoderB, CHANGE); // encoder pin on interrupt 1 (pin 3)
 
 nh.initNode();
 nh.subscribe(teleop_cmd_sub);
 nh.advertise(cmd_pub);
 nh.advertise(sonar_pub1);
 nh.advertise(sonar_pub2);
 nh.advertise(sonar_pub3);  
 
 MsTimer2::set(100, Steering_control_callback); // 100ms period
 MsTimer2::start();
}

void loop(){
 // put your main code here, to run repeatedly:
 f_speed = velocity;
 r_speed = velocity;

 motor_control(f_speed,r_speed);

 sonar_data1.data = sonar[0].ping_cm()/100.0;
 sonar_data2.data = sonar[1].ping_cm()/100.0;
 sonar_data3.data = sonar[2].ping_cm()/100.0;

 sonar_pub1.publish(&sonar_data1);
 sonar_pub2.publish(&sonar_data2);
 sonar_pub3.publish(&sonar_data3);
 
 
 //cmd_vel 
 cmd_vel.linear.x = velocity;
 cmd_vel.angular.z = steer_angle;
 cmd_pub.publish(&cmd_vel);

 nh.spinOnce();

 Serial.print("Steering : ");
 Serial.println(sensorValue);
 //Serial.print("Encoder : ");
// Serial.println(encoder2count);
}
