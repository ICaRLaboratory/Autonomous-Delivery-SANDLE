#include <MsTimer2.h>
#include <ros.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float32.h>

ros::NodeHandle  nh;
std_msgs::Int32 encoder_data;  
std_msgs::Float32 real_cmd_vel;
std_msgs::Float32 sensor_data;
std_msgs::Float32 steering_angle;

int velocity = 0;
int steer_angle = 0;

void teleop_cmd_vel_callback(const geometry_msgs::Twist& msg) {
  velocity = (int)msg.linear.x;       // 
  steer_angle = (int)msg.angular.z;
  if(velocity >= 255) velocity  = 255;  // pwm 
  if(velocity <=-255) velocity = -255;  // pwm 
}

ros::Subscriber<geometry_msgs::Twist> teleop_cmd_sub("cmd_vel", teleop_cmd_vel_callback);
ros::Publisher encoder_pub("encoder", &encoder_data);
ros::Publisher real_cmd_vel_pub("real_cmd_vel", &real_cmd_vel);
ros::Publisher steering_sensor_pub("sensorValue", &sensor_data);
ros::Publisher steering_angle_pub("steering_angle", &steering_angle);

///////////////////////////////// Front and rear Motor Drive /////////////////////////////
#define MOTOR1_PWM 4  //front_motor
#define MOTOR1_DIR 5
#define MOTOR1_BRK 6

#define MOTOR3_PWM 7  //rear_motor
#define MOTOR3_DIR 8
#define MOTOR3_BRK 9

int f_speed = 0, r_speed = 0;

void front_motor_control(int motor1_pwm)
{
  if (motor1_pwm > 0) // forward
    {
    digitalWrite(MOTOR1_DIR, HIGH);
    digitalWrite(MOTOR1_BRK, LOW);
    analogWrite(MOTOR1_PWM, motor1_pwm);
  }
  else if (motor1_pwm < 0) // backward
    {
   digitalWrite(MOTOR1_DIR, LOW);
   digitalWrite(MOTOR1_BRK, LOW);
   analogWrite(MOTOR1_PWM, -motor1_pwm);
  }
  else
    {
   digitalWrite(MOTOR1_DIR, HIGH);
   digitalWrite(MOTOR1_BRK, LOW);
   digitalWrite(MOTOR1_PWM, 0);
  }
}

void rear_motor_control(int motor3_pwm)
{
  if (motor3_pwm > 0) // forward
    {
      digitalWrite(MOTOR3_DIR, HIGH);
      digitalWrite(MOTOR3_BRK, LOW);
      analogWrite(MOTOR3_PWM, motor3_pwm);
  }
  else if (motor3_pwm < 0) // backward
    {
      digitalWrite(MOTOR3_DIR, LOW);
      digitalWrite(MOTOR3_BRK, LOW);
      analogWrite(MOTOR3_PWM, -motor3_pwm);
  }
  else
    {
      digitalWrite(MOTOR3_DIR, HIGH);
      digitalWrite(MOTOR3_BRK, LOW);
      digitalWrite(MOTOR3_PWM, 0);
  }
}

void motor_control(int front_speed, int rear_speed)
{
 front_motor_control(front_speed);
 rear_motor_control(rear_speed);  
}

///////////////////////////////////////  encoder /////////////////////////////////////////////
#define encoder0PinA 2  // interrupt 4 use
#define encoder0PinB 3  // interrupt 5 use

volatile int encoder0Pos = 0;

void doEncoderA(){
  // look for a low-to-high on channel A
  if (digitalRead(encoder0PinA) == HIGH) { 
    // check channel B to see which way encoder is turning
    if (digitalRead(encoder0PinB) == LOW) {  
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
  else   // must be a high-to-low edge on channel A                                       
  { 
    // check channel B to see which way encoder is turning  
    if (digitalRead(encoder0PinB) == HIGH) {   
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
  //Serial.print("encoder0Pos : ");
  //Serial.println (encoder0Pos);
}


void doEncoderB(){
  // look for a low-to-high on channel B
  if (digitalRead(encoder0PinB) == HIGH) {   
   // check channel A to see which way encoder is turning
    if (digitalRead(encoder0PinA) == HIGH) {  
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
  // Look for a high-to-low on channel B
  else { 
    // check channel B to see which way encoder is turning  
    if (digitalRead(encoder0PinA) == LOW) {   
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
  //Serial.print("encoder0Pos : ");
  //Serial.println (encoder0Pos);
}

///////////////////////////////////// steering /////////////////////

#define MOTOR2_PWM 10  //steer_motor
#define MOTOR2_DIR 11 
#define MOTOR2_BRK 12

void steer_motor_control(int motor_pwm)
{
  if (motor_pwm > 0) // forward
    {
      digitalWrite(MOTOR2_DIR, HIGH);
      digitalWrite(MOTOR2_BRK, LOW);
      analogWrite(MOTOR2_PWM, motor_pwm);
  }
  else if (motor_pwm < 0) // backward
    {
      digitalWrite(MOTOR2_DIR, LOW);
      digitalWrite(MOTOR2_BRK, LOW);
      analogWrite(MOTOR2_PWM, -motor_pwm);
  }
  else // stop
    {
       digitalWrite(MOTOR2_DIR, HIGH);
       digitalWrite(MOTOR2_BRK, LOW);
       analogWrite(MOTOR2_PWM, 0);
  }
}


#define Steering_Sensor_pin A15 
#define NEURAL_ANGLE 0
#define LEFT_STEER_ANGLE  -30
#define RIGHT_STEER_ANGLE  30

int sensorValue; 
int Steer_Angle_Measure = 0; 
int Steering_Angle = NEURAL_ANGLE;

double error, error_old;
double error_s, error_d;

float Kp = 3.0;
float Ki = 2;
float Kd = 10; //PID 
int pwm_output;

void Steering_control()
{
  
 // read the analog in value:
 sensorValue = analogRead(Steering_Sensor_pin);
 // map it to the range of the analog out:
 Steer_Angle_Measure = map(sensorValue, 0, 1023, LEFT_STEER_ANGLE, RIGHT_STEER_ANGLE);

 Steering_Angle = NEURAL_ANGLE + steer_angle;

 if (Steering_Angle <= LEFT_STEER_ANGLE + NEURAL_ANGLE)  Steering_Angle  = LEFT_STEER_ANGLE + NEURAL_ANGLE;
 if (Steering_Angle >= RIGHT_STEER_ANGLE + NEURAL_ANGLE)  Steering_Angle = RIGHT_STEER_ANGLE + NEURAL_ANGLE;

 error = Steering_Angle - Steer_Angle_Measure;
 error_s += error;
 error_d = error - error_old;
 error_s = (error_s >=  100) ?  100 : error_s;
 error_s = (error_s <= -100) ? -100 : error_s;
 
 pwm_output = Kp * error + Ki * error_s + Kd * error_d;
 pwm_output = (pwm_output >=  255) ?  255 : pwm_output;
 pwm_output = (pwm_output <= -255) ? -255 : pwm_output;
 
 if (fabs(error)<= 1)
 {
   steer_motor_control(0);
   error_s = 0;
 }
 else steer_motor_control(pwm_output);
 error_old = error;  
 
}

unsigned long timePrev = 0;
unsigned long timeCurr = 0;

void setup() {
 // put your setup code here, to run once:
 Serial.begin(115200);
// Front Motor Drive Pin Setup


 velocity = pwm_output = encoder0Pos = 0;
 pinMode(MOTOR1_PWM, OUTPUT);
 pinMode(MOTOR1_DIR, OUTPUT);  // motor control direction
 pinMode(MOTOR1_BRK, OUTPUT); 

 // Rear Motor Drive Pin Setup
 pinMode(MOTOR3_PWM, OUTPUT);
 pinMode(MOTOR3_DIR, OUTPUT);  // motor control direction
 pinMode(MOTOR3_BRK, OUTPUT); 

 pinMode(MOTOR3_PWM, OUTPUT);
 pinMode(MOTOR3_DIR, OUTPUT);  // motor control direction
 pinMode(MOTOR3_BRK, OUTPUT); 
 
 // Read Encoder Values
 //pinMode(encoder0PinA, INPUT_PULLUP); 
 //pinMode(encoder0PinB, INPUT_PULLUP); 
 //attachInterrupt(digitalPinToInterrupt(encoder0PinA), doEncoderA, CHANGE); // encoder pin on interrupt 4 (pin 2)
 //attachInterrupt(digitalPinToInterrupt(encoder0PinB), doEncoderB, CHANGE); // encoder pin on interrupt 5 (pin 3)

 error = error_s = error_d = error_old = 0.0;
 
 nh.initNode();
 
 nh.subscribe(teleop_cmd_sub);
 nh.advertise(encoder_pub);
 nh.advertise(real_cmd_vel_pub);
 nh.advertise(steering_sensor_pub);
 nh.advertise(steering_angle_pub);
}

void loop(){
 // put your main code here, to run repeatedly:
 
  f_speed = r_speed = velocity;
  motor_control(f_speed, r_speed);
  Steering_control();

  encoder_data.data = Steer_Angle_Measure;
  encoder_pub.publish(&encoder_data);

  sensor_data.data = sensorValue;
  steering_sensor_pub.publish(&sensor_data);

  steering_angle.data = pwm_output;
  steering_angle_pub.publish(&steering_angle);
   
  nh.spinOnce();
 

}
