#include <ros/ros.h>
#include <map>
#include <sensor_msgs/LaserScan.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Float64MultiArray.h>

sensor_msgs::LaserScan scan_msg;
std_msgs::Bool detect_msg;
std_msgs::Bool avoid_function_msg;
std_msgs::Float64MultiArray avoid_heading_angle_msg;
std_msgs::Float64MultiArray object_distance_msg;
ros::Time detection_start_time;

int INDEX;
int size;
int detect_count;
int object_right_angle_index;
double object_right_angle;
int object_left_angle_index;
double object_left_angle;

double object_right_distance;
double object_left_distance;
int max_gap = 0;
int max_gap_dummy = 0;;
int first_gap_index = 0;
int end_gap_index = 0;
int first_gap_dummy = 0;
int end_gap_dummy = 0;
bool gap_start = true;
std::vector<int> find_gap;
std::vector<int> consecutiveLengths;

ros::Publisher detect_pub;
ros::Publisher avoid_heading_angle_pub;
ros::Publisher avoid_function_start_pub;
ros::Publisher object_distance_pub;

bool checkConsecutiveGroups(const std::vector<int>& nums, std::vector<int>& consecutiveLengths) {
    if (nums.empty()) {
        return false;
    }

    consecutiveLengths.clear();
    int currentLength = 0;

    for (size_t i = 0; i < nums.size(); ++i) {
        if (nums[i] == nums[i - 1] + 1) {
            currentLength++;
            if(first_gap_index == 0){ first_gap_index = nums[i - 1]; }
            else if (first_gap_index != 0 && gap_start == true){ 
                first_gap_dummy = nums[i - 1]; 
                gap_start = false;
            }

        } 
        else {
            consecutiveLengths.push_back(currentLength);
            
            if(max_gap == 0) { max_gap = currentLength; }
            else if(max_gap != 0) { max_gap_dummy = currentLength; }

            if(end_gap_index == 0  && gap_start == false ) { end_gap_index = nums[i -1]; }
            else if (end_gap_index != 0){ end_gap_dummy = nums[i - 1]; }

            if(max_gap_dummy >= max_gap) {
                first_gap_index = first_gap_dummy;
                end_gap_index = end_gap_dummy;
            }
            gap_start = true;
            currentLength = 0;
        }
    }

    if(end_gap_index == 0) { end_gap_index = nums[nums.size()-1]; }
    consecutiveLengths.push_back(currentLength);

    currentLength = 0;
    gap_start = true;

    return true;
}

long map(long x, long in_min, long in_max,long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  
}

void scan_Callback(const sensor_msgs::LaserScan::ConstPtr& msg){
    

    for(int i = -330; i <= 330; i++){
        size = msg->ranges.size();
        INDEX = i + size/2;

        // object_detect
        if(msg->ranges[INDEX] <= 0.3) {
            if(detect_count == 0) { 
                object_right_angle_index = INDEX;
                object_right_distance = msg->ranges[INDEX]; 

            }
            else if (detect_count != 0) { 
                object_left_angle_index = INDEX;
                object_left_distance = msg->ranges[INDEX]; 
            }
            detect_count ++;
        }
        // find gap
        else if( msg->ranges[INDEX] > 0.3 ) {

            find_gap.push_back(INDEX);
        }


        if(detect_count >= 1) {
            detect_msg.data = true;
            detect_pub.publish(detect_msg);
        }
        else {
            detect_msg.data = false;
            detect_pub.publish(detect_msg);
        }

    }
    
    //ROS_INFO("detect_count : %d", detect_count);
    ROS_INFO("detect_msg : %d", detect_msg.data);
    //ROS_INFO("range : %f", msg->ranges[INDEX]);

    checkConsecutiveGroups(find_gap, consecutiveLengths);

    find_gap.clear();

    // avoid_function
    if( detect_msg.data == true && detection_start_time.isZero() ) { detection_start_time = ros::Time::now(); }
    if( detect_msg.data == false ) { detection_start_time = ros::Time(0); }

    if(detect_msg.data && (ros::Time::now() - detection_start_time).toSec() >= 0.1 ) {
            
        avoid_function_msg.data = true;
        avoid_function_start_pub.publish(avoid_function_msg);
    }
    else if(!detect_msg.data || (ros::Time::now() - detection_start_time).toSec() <= 0.1 ) { 
         
       avoid_function_msg.data = false; 
       avoid_function_start_pub.publish(avoid_function_msg);
    }

    // avoid angle calculate
    object_right_angle = map(object_right_angle_index, 0, size-1, 0, 360) - 180;
    object_left_angle = map(object_left_angle_index, 0, size-1, 0, 360) - 180;

    avoid_heading_angle_msg.data[0] = object_right_angle; // [0]
    avoid_heading_angle_msg.data[1] = object_left_angle;  // [1]
    avoid_heading_angle_pub.publish(avoid_heading_angle_msg);

    object_distance_msg.data[0] = object_right_distance;
    object_distance_msg.data[1] = object_left_distance; 
    object_distance_pub.publish(object_distance_msg);

    ROS_INFO("object_right_angle : %d", object_right_angle_index);
    ROS_INFO("object_left_angle : %d", object_left_angle_index);

    ROS_INFO("first_gap_index : %d", first_gap_index);
    ROS_INFO("end_gap_index : %d", end_gap_index);

    detect_msg.data = false;
    detect_count = 0;
    max_gap = 0;
    max_gap_dummy = 0;
    first_gap_index = 0;
    end_gap_index = 0;
}

int main(int argc, char** argv){
    ros::init(argc, argv, "lidar_detect");
    ros::NodeHandle nh;

    detect_msg.data = false;
    avoid_function_msg.data = false;
    detect_count = 0;
    avoid_heading_angle_msg.data.resize(2);
    object_distance_msg.data.resize(2);

    detect_pub = nh.advertise<std_msgs::Bool>("lidar_object_detect", 1);
    avoid_function_start_pub = nh.advertise<std_msgs::Bool>("avoid_function_start", 10);
    avoid_heading_angle_pub = nh.advertise<std_msgs::Float64MultiArray>("avoid_heading_angle", 10);
    object_distance_pub = nh.advertise<std_msgs::Float64MultiArray>("object_distance", 10);
    ros::Subscriber scan_sub = nh.subscribe("/scan", 10, scan_Callback);

    ros::spin();
    return 0;


}
