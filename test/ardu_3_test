#include <MsTimer2.h>

#include <ros.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Bool.h>

ros::NodeHandle  nh;

std_msgs::Float32 encoder_data;
std_msgs::Float32 steering_angle;

bool lidar_detect;
int f_speed = 0, r_speed = 0;
int velocity = 0;
int steer_angle = 0;
double dummy = 0;

void cmd_vel_callback(const geometry_msgs::Twist& msg) {
  dummy = msg.linear.x;       
  steer_angle = 20*msg.angular.z;   

  if(dummy > 0){
    velocity  = 80;  
  }
  else if (dummy < 0){
    velocity = -80; 
  }

}


void heading_angle_callback(const std_msgs::Int16& msg) {
   
   steer_angle = msg.data;

}

void speed_callback(const std_msgs::Int16& msg) {
   
   velocity = msg.data;

}


void lidar_object_detect_callback(const std_msgs::Bool& msg) {
   
   lidar_detect = msg.data;

}

ros::Subscriber<std_msgs::Int16> heading_angle_sub("Car_Control_cmd/SteerAngle_Int16", heading_angle_callback);
ros::Subscriber<std_msgs::Int16> speed_sub("Car_Control_cmd/Speed_Int16", speed_callback);
ros::Subscriber<geometry_msgs::Twist> cmd_sub("cmd_vel", cmd_vel_callback);
ros::Subscriber<std_msgs::Bool> lidar_detect_sub("lidar_object_detect", lidar_object_detect_callback);

ros::Publisher encoder_pub("encoder_arduino", &encoder_data);
ros::Publisher steerAngle_pub("steering_angle", &steering_angle);


// Front Motor Drive
#define MOTOR1_PWM 4
#define MOTOR1_DIR 5
#define MOTOR1_BRK 6

// Rear Motor Drive
#define MOTOR3_PWM 7
#define MOTOR3_DIR 8
#define MOTOR3_BRK 9


void front_motor_control(int motor1_pwm)
{
   if (motor1_pwm > 0) // forward
  {
    digitalWrite(MOTOR1_DIR, HIGH);
    digitalWrite(MOTOR1_BRK, LOW);
    analogWrite(MOTOR1_PWM, motor1_pwm);
  }
  else if (motor1_pwm < 0) // backward
  {
    digitalWrite(MOTOR1_DIR, LOW);
    digitalWrite(MOTOR1_BRK, LOW);
    analogWrite(MOTOR1_PWM, -motor1_pwm);
  }
  else
  {
    digitalWrite(MOTOR1_DIR, LOW);
    digitalWrite(MOTOR1_BRK, LOW);
    digitalWrite(MOTOR1_PWM, 0);
  }
}

void rear_motor_control(int motor3_pwm)
{
   if (motor3_pwm > 0) // forward
  {
    digitalWrite(MOTOR3_DIR, HIGH);
    digitalWrite(MOTOR3_BRK, LOW);
    analogWrite(MOTOR3_PWM, motor3_pwm);
  }
  else if (motor3_pwm < 0) // backward
  {
    digitalWrite(MOTOR3_DIR, LOW);
    digitalWrite(MOTOR3_BRK, LOW);
    analogWrite(MOTOR3_PWM, -motor3_pwm);
  }
  else
  {
    digitalWrite(MOTOR3_DIR, LOW);
    digitalWrite(MOTOR3_BRK, LOW);
    digitalWrite(MOTOR3_PWM, 0);
  }
}

void motor_control(int front_speed, int rear_speed)
{
  front_motor_control(front_speed);
  rear_motor_control(rear_speed);  
}



///////////////////////////////////////  Steering PID 제어 /////////////////////////////////////////////
#define Steering_Sensor A8  // Analog input pin that the potentiometer is attached to
#define NEURAL_ANGLE 0
#define LEFT_STEER_ANGLE  -17.0
#define RIGHT_STEER_ANGLE  17.0
#define MOTOR2_PWM 14
#define MOTOR2_DIR 15
#define MOTOR2_BRK 16

float Kp = 3.0;
float Ki = 2.0;
float Kd = 10.0; //PID 
double error, error_old;
double error_s, error_d;
int pwm_output;

long sensorValue = 0;        // value read from the pot
double Steer_Angle_Measure = 0.0;        // value output to the PWM (analog out)
int Steering_Angle = NEURAL_ANGLE;

void steer_motor_control(int motor_pwm)
{
  if (motor_pwm > 0) // forward
  {
    digitalWrite(MOTOR2_DIR, LOW);
    digitalWrite(MOTOR2_BRK, LOW);
    analogWrite(MOTOR2_PWM, motor_pwm);
  }
  else if (motor_pwm < 0) // backward
  {
    digitalWrite(MOTOR2_DIR, HIGH);
    digitalWrite(MOTOR2_BRK, LOW);
    analogWrite(MOTOR2_PWM, -motor_pwm);
  }
  else // stop
  {
    digitalWrite(MOTOR2_DIR, LOW);
    digitalWrite(MOTOR2_BRK, LOW);
    analogWrite(MOTOR2_PWM, 0);
  }
}

void PID_Control()
{
  error = Steering_Angle - Steer_Angle_Measure ;
  error_s += error;
  error_d = error - error_old;
  error_s = (error_s >=  80) ?  80 : error_s;
  error_s = (error_s <= -80) ? -80 : error_s;

  pwm_output = Kp * error + Kd * error_d + Ki * error_s;
  pwm_output = (pwm_output >=  255) ?  255 : pwm_output;
  pwm_output = (pwm_output <= -255) ? -255 : pwm_output;

  if (error == 0)
  {
    steer_motor_control(0);
    error_s = 0;
  }
  else          steer_motor_control(pwm_output);
  error_old = error;  
}

void steering_control()
{
  if (Steering_Angle <= LEFT_STEER_ANGLE + NEURAL_ANGLE)  Steering_Angle  = LEFT_STEER_ANGLE + NEURAL_ANGLE;
  if (Steering_Angle >= RIGHT_STEER_ANGLE + NEURAL_ANGLE)  Steering_Angle = RIGHT_STEER_ANGLE + NEURAL_ANGLE;
  PID_Control(); 
}

long map(long x, long in_min, long in_max,long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  
}
void control_callback()
{

  motor_control(f_speed, r_speed);

  // read the analog in value:
  sensorValue = analogRead(Steering_Sensor);
  // map it to the range of the analog out:
  Steer_Angle_Measure = map(sensorValue, 0.0, 1023.0, LEFT_STEER_ANGLE, RIGHT_STEER_ANGLE);
  Steering_Angle = NEURAL_ANGLE + steer_angle;

  if(lidar_detect == true) { Steering_Angle = 0; }
  steering_control();
  
}

/////////////////////////////////////////////// encoder ///////////////////////

#define encoder0PinA 2  // interrupt 4 use
#define encoder0PinB 3  // interrupt 5 use

volatile int encoder0Pos = 0;

void doEncoderA(){
  if (digitalRead(encoder0PinA) == HIGH) { 
    if (digitalRead(encoder0PinB) == LOW) {  
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
  else                                     
  { 
    if (digitalRead(encoder0PinB) == HIGH) {   
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
}


void doEncoderB(){
  if (digitalRead(encoder0PinB) == HIGH) {   
    if (digitalRead(encoder0PinA) == HIGH) {  
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
  else { 
    if (digitalRead(encoder0PinA) == LOW) {   
      encoder0Pos = encoder0Pos + 1;
    } 
    else {
      encoder0Pos = encoder0Pos - 1;
    }
  }
}

void setup() {
   Serial.begin(115200);

 // Front Motor Drive Pin Setup
  pinMode(MOTOR1_PWM, OUTPUT);
  pinMode(MOTOR1_DIR, OUTPUT);  
  pinMode(MOTOR1_BRK, OUTPUT);

  // Rear Motor Drive Pin Setup
  pinMode(MOTOR3_PWM, OUTPUT);
  pinMode(MOTOR3_DIR, OUTPUT);  
  pinMode(MOTOR3_BRK, OUTPUT);

   //Steer
  pinMode(MOTOR2_PWM, OUTPUT);
  pinMode(MOTOR2_DIR, OUTPUT);
  pinMode(MOTOR2_BRK, OUTPUT);

  error = error_s = error_d = error_old = 0.0;
  pwm_output = 0;
  dummy = 0;

  nh.initNode();
  
  nh.subscribe(cmd_sub);
  nh.subscribe(speed_sub);
  nh.subscribe(heading_angle_sub);
  nh.subscribe(lidar_detect_sub);

  nh.advertise(encoder_pub);
  nh.advertise(steerAngle_pub);

  // Read Encoder Values
  pinMode(encoder0PinA, INPUT_PULLUP); 
  pinMode(encoder0PinB, INPUT_PULLUP); 
  attachInterrupt(digitalPinToInterrupt(encoder0PinA), doEncoderA, CHANGE); // encoder pin on interrupt 4 (pin 2)
  attachInterrupt(digitalPinToInterrupt(encoder0PinB), doEncoderB, CHANGE); // encoder pin on interrupt 5 (pin 3)


  MsTimer2::set(200, control_callback); // 500ms period
  MsTimer2::start();

}

void loop() {
  // put your main code here, to run repeatedly:

  f_speed = r_speed = velocity;
  if(lidar_detect == true) { f_speed = r_speed = 0; }
  
  motor_control(r_speed, r_speed);
  control_callback();

  encoder_data.data = encoder0Pos;
  encoder_pub.publish(&encoder_data);

  //steering_angle.data = Steer_Angle_Measure;
  steering_angle.data = sensorValue;
  steerAngle_pub.publish(&steering_angle);

  nh.spinOnce();
}
